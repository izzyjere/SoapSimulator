<EditForm Model="@Model" OnInvalidSubmit="Error" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="@Model.MethodName" Label="Method Name" For="()=>Model.MethodName" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h6">Request Format</MudText>
                    <MudDivider />
                    <MudTextField Required Lines="6" @bind-Value="@Model.RequestFormat.Body" Variant="Variant.Outlined" Label="Enter sample request XSD." />
                </MudItem>
                <MudItem xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h6">Response Format</MudText>
                    <MudDivider />
                    <MudTextField Required Lines="6" @bind-Value="@Model.ResponseFormat.Body" Variant="Variant.Outlined" Label="Enter sample response  XSD." />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="()=>Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }
    [Parameter]
    public SoapAction? Model { get; set; }
    [Parameter]
    public bool IsEditing { get; set; }
    protected override void OnInitialized()
    {
        if (!IsEditing)
        {
            Model = new();
        }
    }
    void Error() => snackBar.Add("Fill in all required fields", Severity.Error);
    async Task Save()
    {
        Model.MethodName = Model.MethodName.Trim();
        if (string.IsNullOrEmpty(Model.ResponseFormat.Body))
        {
            Error();
            return;
        }
        if (string.IsNullOrEmpty(Model.RequestFormat.Body))
        {
            Error();
            return;
        }
        Dialog.Close(Model);
    }
}
