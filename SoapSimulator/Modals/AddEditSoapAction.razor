<EditForm Model="@Model" OnInvalidSubmit='()=>Error("Fill in all required fields")' OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField ReadOnly="View" Variant="Variant.Outlined" @bind-Value="@Model.MethodName" Label="Unique Action Name" For="()=>Model.MethodName" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField ReadOnly="View" Variant="Variant.Outlined" @bind-Value="@Model.Description" Label="Description" For="()=>Model.Description" />
                </MudItem>
                <MudItem xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h6">Request Format</MudText>
                    <MudDivider />
                    <MudTextField ReadOnly Required Lines="10" @bind-Value="@Model.Request.Body" Variant="Variant.Outlined" Label="Enter sample request XML." />
                </MudItem>
                <MudItem xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h6">Configure Action Responses</MudText>
                    <MudChipSet>
                        <center>
                            @foreach (var status in (ActionStatus[])Enum.GetValues(typeof(ActionStatus)))
                            {
                                <MudChip OnClick="()=>ConfigureResponse(status)" IconColor="Color.Success" Icon='@(responses.ContainsKey(status)?Icons.Material.Filled.DoneAll:"")'>@status.ToString().Replace("_"," ")</MudChip>
                            }
                        </center>
                    </MudChipSet>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="()=>Dialog.Cancel()">Close</MudButton>
            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }
    [Parameter]
    public SoapAction? Model { get; set; }
    [Parameter]
    public bool View { get; set; }
    Dictionary<ActionStatus, string> responses;
    protected override void OnInitialized()
    {
        if (!View)
        {
            Model = new();
            responses = new();
        }
        else
        {
            responses = new Dictionary<ActionStatus, string>();
            foreach (var response in Model.Responses)
            {
                responses[response.ActionStatus] = response.Body;
            }
        }
    }
    async void ConfigureResponse(ActionStatus status)
    {
        if (!responses.ContainsKey(status))
        {
            var dialog = dialogService.Show<AddEditResponse>($"{status.ToString().Replace("_", "")} Response for {Model.MethodName}", new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                responses[status] = result.ToString();
                StateHasChanged();
            }
        }
        else
        {
            var dialog = dialogService.Show<AddEditResponse>($"{status.ToString().Replace("_", "")} Response for {Model.MethodName}", new DialogParameters{["Body"]=responses[status]},new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                responses[status] = result.Data.ToString();
                StateHasChanged();
            }
        }
    }

    void Error(string error) => snackBar.Add(error, Severity.Error);
    async Task Save()
    {
        if (responses.Count < 5)
        {
            Error("Some of the responses havenot been configured.");
            return;
        }
        Model.MethodName = Model.MethodName.Trim();
        if (string.IsNullOrEmpty(Model.Request.Body))
        {
            Error("Please provide a sample request xml.");
            return;
        }
        var validateReq = xmlValidator.IsValidXml(Model.Request.Body);
        if (!validateReq.IsValid)
        {
            Error("Request XML Error: " + validateReq.Message);
            return;
        }
        if (View)
        {
            Model.Responses.Clear();
            foreach (var item in responses)
            {
                Model.Responses.Add(new ResponseFormat { ActionStatus = item.Key, Body = item.Value });
            }
            await configurationService.UpdateActionAsync(Model);
            snackBar.Add($"Action {Model.MethodName} updated.", Severity.Success);
            Dialog.Close(null);
            return;
        }
        else
        {
            foreach (var item in responses)
            {
                Model.Responses.Add(new ResponseFormat { ActionStatus = item.Key, Body = item.Value });
            }
            Dialog.Close(Model);
        }

    }
}
