<EditForm Model="@Model" OnInvalidSubmit="Error" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="@Model.Name" Label="Configuration Name" For="()=>Model.Name" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSwitch T="bool" Color="Color.Secondary" @bind-Checked="@Model.IsCurrent">Set as current</MudSwitch>
                </MudItem>
                <MudItem xs="12">
                    <MudText Align="Align.Center" Typo="Typo.h6">Actions</MudText>
                    <MudDivider />
                    <MudTable Context="secordContext" Bordered Striped Hover Items="@Model.Actions">
                        <ToolBarContent>
                            <MudButton OnClick="AddAction" Variant="Variant.Outlined" Color="Color.Success">Add</MudButton>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Created On</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Created On">@secordContext.DateCreated.ToString("dd MMM yyyy H:mm")</MudTd>
                            <MudTd DataLabel="Name">@secordContext.MethodName</MudTd>
                            <MudTd DataLabel="Actions">
                                <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.TableView" OnClick="()=>View(secordContext)" />
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="()=>RemoveAction(secordContext)" />                              
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="()=>Dialog.Cancel()">Close</MudButton>
            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    [CascadingParameter]
    MudDialogInstance Dialog { get; set; }
    [Parameter]
    public SystemConfiguration? Model { get; set; }
    [Parameter]
    public bool IsEditing { get; set; }
    protected override void OnInitialized()
    {
        if (!IsEditing)
        {
            Model = new();
        }
    }
    async void View(SoapAction record)
    {
        var dialog = dialogService.Show<AddEditSoapAction>("Edit Action", new DialogParameters { ["Model"] = record, ["View"] = true }, new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var result = await dialog.Result;      
    }
    void Error() => snackBar.Add("Fill in all required fields", Severity.Error);
    async Task Save()
    {
        if(!Model.Actions.Any())
        {
            Error();
            return;
        }
        if(IsEditing)
        {
            var updated = await configurationService.UpdateConfigurationAsync(Model);
            if(updated)
            {
                snackBar.Add("Configuration saved.", Severity.Success);
                Dialog.Close();
            }
            else
            {
                snackBar.Add("Something went wrong.", Severity.Error);
            }
        }
        else
        {
            var saved = await configurationService.SaveConfigurationAsync(Model);
            if (saved)
            {
                snackBar.Add("Configuration saved.", Severity.Success);
                Dialog.Close();
            }
            else
            {
                snackBar.Add("Something went wrong.", Severity.Error);
            }
        }
    }
    async void RemoveAction(SoapAction record)
    {
        var delete = await dialogService.ShowMessageBox("Delete Action", "Are you sure you wann delete this action?", yesText: "Yes", noText: "No");
        if ((bool)delete)
        {
            Model.Actions.Remove(record);
            await configurationService.DeleteXSD(record.Request.XSDPath);
            await configurationService.DeleteXSD(record.Response.XSDPath);
            StateHasChanged();
        }
    }
    async void AddAction()
    {
        var dialog = dialogService.Show<AddEditSoapAction>("Create new action", new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true });
        var result = await dialog.Result;
        if(!result.Cancelled)
        {
            Model.Actions.Add((SoapAction)result.Data);
            StateHasChanged();
        }
    }
}
